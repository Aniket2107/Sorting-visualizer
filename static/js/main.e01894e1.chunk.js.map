{"version":3,"sources":["Algo/merge.js","Algo/quickSort.js","Sorting/VisualSort.js","Algo/bubble.js","Algo/insertion.js","App.js","serviceWorker.js","index.js"],"names":["mergeSort","mainArray","startIdx","endIdx","tempArray","animations","middleIdx","Math","floor","doMerge","k","i","j","push","arraysAreEqual","arrayOne","arrayTwo","length","swap","items","leftIdx","rightIdx","temp","quickSortPartition","left","right","pivot","doQuickSort","index","VisualSort","useState","array","setarray","resetArray","genArray","randomNumber","useEffect","makeAllBarsGreen","arrayBars","document","getElementsByClassName","style","backgroundColor","min","max","random","className","map","value","idx","key","height","onClick","slice","mergeAnimations","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","auxiliaryArray","swapped","doBubbleSort","getBubbleSortAnimations","currentPosition","jsSortedArray","sort","a","b","getquickAnimations","tempAimations","auxillaryArray","N","insertionSort","getInsertionSortAnimations","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e01894e1.chunk.js","sourcesContent":["export const mergeAnimations = (array) => {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const tempArray = array.slice();\r\n  mergeSort(array, 0, array.length - 1, tempArray, animations);\r\n  return animations;\r\n};\r\n\r\nconst mergeSort = (mainArray, startIdx, endIdx, tempArray, animations) => {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSort(tempArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSort(tempArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations);\r\n};\r\n\r\nconst doMerge = (\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  tempArray,\r\n  animations\r\n) => {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    //the below two push is just for animation puropse\r\n\r\n    //For first animated comparison we have to push them\r\n    //to change the color\r\n    animations.push([i, j]);\r\n\r\n    //Second push for the bars to gain their\r\n    //original color\r\n    animations.push([i, j]);\r\n\r\n    // actual comparison\r\n    if (tempArray[i] <= tempArray[j]) {\r\n      //this push overwrites the actual bars\r\n      animations.push([k, tempArray[i]]);\r\n      mainArray[k++] = tempArray[i++];\r\n    } else {\r\n      //this push is also to overwrite the bars\r\n      animations.push([k, tempArray[j]]);\r\n      mainArray[k++] = tempArray[j++];\r\n    }\r\n  }\r\n\r\n  //Check for any remainings\r\n  while (i <= middleIdx) {\r\n    //The below two push are just similar as above and\r\n    // is done only to animate\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n\r\n    //This push actually overwrites the values\r\n    animations.push([k, tempArray[i]]);\r\n    mainArray[k++] = tempArray[i++];\r\n  }\r\n\r\n  while (j <= endIdx) {\r\n    //The below two push are just similar as above and\r\n    // is done only to animate\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n\r\n    //This push actually overwrites the values\r\n    animations.push([k, tempArray[j]]);\r\n    mainArray[k++] = tempArray[j++];\r\n  }\r\n};\r\n","export const getquickAnimations = (array) => {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  //\r\n  const jsSortedArray = array.slice().sort((a, b) => a - b);\r\n  if (arraysAreEqual(jsSortedArray, array)) return animations;\r\n  //\r\n  const tempArray = array.slice();\r\n  doQuickSort(animations, tempArray, 0, tempArray.length - 1);\r\n  return animations;\r\n};\r\n\r\nconst arraysAreEqual = (arrayOne, arrayTwo) => {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst swap = (animations, items, leftIdx, rightIdx) => {\r\n  let temp;\r\n  temp = items[leftIdx];\r\n  items[leftIdx] = items[rightIdx];\r\n  items[rightIdx] = temp;\r\n\r\n  animations.push([leftIdx, rightIdx]);\r\n};\r\n\r\nexport const quickSortPartition = (items, left, right, animations) => {\r\n  let pivot = items[Math.floor((right + left) / 2)];\r\n  let i = left;\r\n  let j = right;\r\n\r\n  while (i <= j) {\r\n    while (items[i] < pivot) {\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(animations, items, i, j);\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n};\r\n\r\nexport const doQuickSort = (animations, tempArray, left, right) => {\r\n  let index;\r\n  if (tempArray.length > 1) {\r\n    index = quickSortPartition(tempArray, left, right, animations);\r\n    if (left < index - 1) {\r\n      doQuickSort(animations, tempArray, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      doQuickSort(animations, tempArray, index, right);\r\n    }\r\n  }\r\n  return tempArray;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./VisualSort.css\";\r\nimport { mergeAnimations } from \"../Algo/merge\";\r\nimport { getBubbleSortAnimations } from \"../Algo/bubble\";\r\nimport {\r\n  getquickAnimations,\r\n  doQuickSort,\r\n  quickSortPartition,\r\n} from \"../Algo/quickSort\";\r\nimport { getInsertionSortAnimations } from \"../Algo/insertion\";\r\n\r\nconst VisualSort = () => {\r\n  const [array, setarray] = useState([]);\r\n\r\n  const PRIMARY_COLOR = \"blue\";\r\n  const SECONDARY_COLOR = \"red\";\r\n  const TIME_MS = 3;\r\n\r\n  const resetArray = () => {\r\n    const genArray = [];\r\n    for (let i = 0; i < 300; i++) {\r\n      genArray.push(randomNumber(5, 500));\r\n    }\r\n    setarray(genArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n  }, []);\r\n\r\n  const mergeSort = () => {\r\n    const animations = mergeAnimations(array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * TIME_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barStyleOne = arrayBars[barOneIdx].style;\r\n          barStyleOne.height = `${newHeight}px`;\r\n        }, i * TIME_MS);\r\n      }\r\n    }\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    const animations = getBubbleSortAnimations(array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      setTimeout(() => {\r\n        var [barOneIdx, barTwoIdx] = animations[i];\r\n\r\n        var barOneStyle = arrayBars[barOneIdx].style;\r\n        var barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        var temp = array[barOneIdx];\r\n        array[barOneIdx] = array[barTwoIdx];\r\n        array[barTwoIdx] = temp;\r\n\r\n        barOneStyle.height = `${array[barOneIdx]}px`;\r\n        barTwoStyle.height = `${array[barTwoIdx]}px`;\r\n\r\n        barOneStyle.backgroundColor = \"red\";\r\n        barTwoStyle.backgroundColor = \"blue\";\r\n\r\n        var currentPosition = barOneIdx;\r\n        for (let j = 0; j < currentPosition; j++) {\r\n          var jBarStyle = arrayBars[j].style;\r\n          jBarStyle.backgroundColor = \"blue\";\r\n        }\r\n        if (i === animations.length - 1) {\r\n          makeAllBarsGreen();\r\n        }\r\n      }, i * TIME_MS);\r\n    }\r\n  };\r\n\r\n  const quickSort = () => {\r\n    const animations = getquickAnimations(array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      setTimeout(() => {\r\n        let [barOneIdx, barTwoIdx] = animations[i];\r\n        let tempAimations = [];\r\n        let index;\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        if (array.length > 1) {\r\n          index = quickSortPartition(array, 0, array.length - 1, tempAimations); //index returned from partition\r\n          if (0 < index - 1) {\r\n            //more elements on the left side of the pivot\r\n            doQuickSort(tempAimations, array, 0, index - 1);\r\n          }\r\n          if (index < array.length) {\r\n            //more elements on the right side of the pivot\r\n            doQuickSort(tempAimations, array, 0, array.length - 1);\r\n          }\r\n        }\r\n\r\n        barOneStyle.height = `${array[barOneIdx]}px`;\r\n        barTwoStyle.height = `${array[barTwoIdx]}px`;\r\n\r\n        barOneStyle.backgroundColor = \"green\";\r\n        barTwoStyle.backgroundColor = \"red\";\r\n\r\n        let currentPosition = barOneIdx;\r\n        for (let j = 0; j < currentPosition; j++) {\r\n          let jBarStyle = arrayBars[j].style;\r\n          jBarStyle.backgroundColor = \"green\";\r\n        }\r\n        if (i === animations.length - 1) {\r\n          makeAllBarsGreen();\r\n        }\r\n      }, 0.0001);\r\n    }\r\n  };\r\n\r\n  const insertionSort = () => {\r\n    const [animations] = getInsertionSortAnimations(array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparision1\" ||\r\n        animations[i][0] === \"comparision2\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange) {\r\n        const color =\r\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * TIME_MS);\r\n      } else {\r\n        const [temp, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * TIME_MS);\r\n      }\r\n    }\r\n  };\r\n\r\n  const makeAllBarsGreen = () => {\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let j = 0; j < arrayBars.length; j++) {\r\n      let jBarStyle = arrayBars[j].style;\r\n      jBarStyle.backgroundColor = \"blue\";\r\n    }\r\n  };\r\n\r\n  const randomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  };\r\n\r\n  return (\r\n    <div className=\"array-container\">\r\n      {array.map((value, idx) => (\r\n        <div\r\n          className=\"array-bar\"\r\n          key={idx}\r\n          style={{ height: `${value}px` }}\r\n        ></div>\r\n      ))}\r\n      <br />\r\n      <br />\r\n      <button onClick={resetArray} className=\"btn btn-primary m-3\">\r\n        Random array\r\n      </button>\r\n      <button onClick={mergeSort} className=\"btn btn-outline-success m-3\">\r\n        Merge Sort\r\n      </button>\r\n      <button onClick={bubbleSort} className=\"btn btn-outline-success m-3\">\r\n        Bubble sort\r\n      </button>\r\n      <button onClick={quickSort} className=\"btn btn-outline-success m-3\">\r\n        Quick Sort\r\n      </button>\r\n      <button onClick={insertionSort} className=\"btn btn-outline-success m-3\">\r\n        Insertion Sort\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualSort;\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  doBubbleSort(animations, auxiliaryArray);\r\n  return animations;\r\n}\r\n\r\nexport function doBubbleSort(animations, auxiliaryArray) {\r\n  var swapped;\r\n  do {\r\n    swapped = false;\r\n    for (var i = 0; i < auxiliaryArray.length - 1; i++) {\r\n      if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n        var temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[i + 1];\r\n        auxiliaryArray[i + 1] = temp;\r\n        animations.push([i, i + 1]);\r\n        swapped = true;\r\n      }\r\n    }\r\n  } while (swapped);\r\n  return auxiliaryArray;\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  insertionSort(auxillaryArray, animations);\r\n  array = auxillaryArray;\r\n  return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n  const N = auxillaryArray.length;\r\n  for (let i = 1; i < N; i++) {\r\n    let key = auxillaryArray[i];\r\n    let j = i - 1;\r\n    animations.push([\"comparision1\", j, i]);\r\n    animations.push([\"comparision2\", j, i]);\r\n    while (j >= 0 && auxillaryArray[j] > key) {\r\n      animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n      auxillaryArray[j + 1] = auxillaryArray[j];\r\n      j = j - 1;\r\n      if (j >= 0) {\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n      }\r\n    }\r\n    animations.push([\"overwrite\", j + 1, key]);\r\n    auxillaryArray[j + 1] = key;\r\n  }\r\n}\r\n","import React from \"react\";\nimport VisualSort from \"./Sorting/VisualSort\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center text-dark\">Sorting Visualiser</h1>\n      <VisualSort></VisualSort>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}